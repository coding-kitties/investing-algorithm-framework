"use strict";(self.webpackChunkinvesting_algorithm_framework_docs=self.webpackChunkinvesting_algorithm_framework_docs||[]).push([[8254],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>p});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),d=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},l=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=d(a),k=n,p=u["".concat(s,".").concat(k)]||u[k]||m[k]||i;return a?r.createElement(p,o(o({ref:t},l),{},{components:a})):r.createElement(p,o({ref:t},l))}));function p(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=k;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:n,o[1]=c;for(var d=2;d<i;d++)o[d]=a[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}k.displayName="MDXCreateElement"},5923:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var r=a(7462),n=(a(7294),a(3905));const i={sidebar_position:1},o="Market data sources",c={unversionedId:"Data/market-data-sources",id:"Data/market-data-sources",title:"Market data sources",description:"Algorithmic trading needs quick access to real-time data and effective data manipulation for successful analysis.",source:"@site/docs/Data/market-data-sources.md",sourceDirName:"Data",slug:"/Data/market-data-sources",permalink:"/investing-algorithm-framework/Data/market-data-sources",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSideBar",previous:{title:"Download Market Data",permalink:"/investing-algorithm-framework/Data/download"},next:{title:"Multiple data sources",permalink:"/investing-algorithm-framework/Data/multiple-market-data-sources"}},s={},d=[{value:"Accessing data",id:"accessing-data",level:2},{value:"CCXT market data sources",id:"ccxt-market-data-sources",level:2},{value:"CCXTTickerMarketDataSource",id:"ccxttickermarketdatasource",level:3},{value:"CCXTOHLCVMarketDataSource",id:"ccxtohlcvmarketdatasource",level:3},{value:"CCXTOrderBookMarketDataSource",id:"ccxtorderbookmarketdatasource",level:3}],l={toc:d},u="wrapper";function m(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,r.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"market-data-sources"},"Market data sources"),(0,n.kt)("p",null,"Algorithmic trading needs quick access to real-time data and effective data manipulation for successful analysis.\nTo meet these needs, the framework provides a data object that can be used in your trading strategies."),(0,n.kt)("p",null,"For data availability, we use a push-based approach. This means we send the desired information directly as\nan argument to each trading strategy handler function or trading strategy class.\nIt's easy to use \u2013 just annotate your handler with the information you need."),(0,n.kt)("p",null,"Here is an example of a handler that uses the ",(0,n.kt)("inlineCode",{parentName:"p"},"TICKER")," data object:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'# A ticker market data source for the BTC/EUR symbol on the bitvavo exchange\nbitvavo_ticker_btc_eur = CCXTTickerMarketDataSource(\n    identifier="BTC-ticker",\n    market="BITVAVO",\n    symbol="BTC/EUR",\n)\n\nclass MyTradingStrategy(TradingStrategy):\n    time_unit = TimeUnit.SECOND  \n    interval = 5  \n    market_data_sources = ["BTC-ticker"] # Registering the market data source by using its identifier\n\n    def apply_strategy(self, algorithm: Algorithm, data: dict):\n        print(data)\n        \n# Make sure to register your market data sources with the app\napp.add_trading_strategy(MyTradingStrategy)\napp.add_market_data_source(bitvavo_ticker_btc_eur)\n')),(0,n.kt)("p",null,'By doing so your handler function parameter data will be assigned a data Object containing ticker for BTC/EUR from\nthe bitvavo exchange under the key "BTC-ticker".'),(0,n.kt)("h2",{id:"accessing-data"},"Accessing data"),(0,n.kt)("p",null,"You can easily access the data object by using the ",(0,n.kt)("inlineCode",{parentName:"p"},"identifier")," attribute of your MarketDataSource object.\nThe following code snippet shows how to access the data object:"),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"The data object that is passed in your trading strategy is a dictionary. This allows you to access multiple data objects\nin your trading strategy. The key of the dictionary is the identifier of the market data source.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'# A ticker market data source for the BTC/EUR symbol on the bitvavo exchange\nbitvavo_ticker_btc_eur = CCXTTickerMarketDataSource(\n    identifier="BTC-ticker",\n    market="BITVAVO",\n    symbol="BTC/EUR",\n)\n\nclass MyTradingStrategy(TradingStrategy):\n    time_unit = TimeUnit.SECOND  \n    interval = 5  \n    market_data_sources = ["BTC-ticker"] # Registering the market data source by using its identifier\n\n    def apply_strategy(self, algorithm: Algorithm, data):\n        ticker_data = data["BTC-ticker"] # Accessing the data object directly by using the identifier\n        \n# Make sure to register your market data sources with the app\napp.add_trading_strategy(MyTradingStrategy)\napp.add_market_data_source(bitvavo_ticker_btc_eur)\n')),(0,n.kt)("h2",{id:"ccxt-market-data-sources"},"CCXT market data sources"),(0,n.kt)("p",null,"The framework comes out of the box with support for the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/ccxt/ccxt"},"ccxt"),".\nThis allows you the use the following ccxt market data sources:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"CCXTTickerMarketDataSource"),(0,n.kt)("li",{parentName:"ul"},"CCXTOHLCVMarketDataSource"),(0,n.kt)("li",{parentName:"ul"},"CCXTOrderBookMarketDataSource")),(0,n.kt)("h3",{id:"ccxttickermarketdatasource"},"CCXTTickerMarketDataSource"),(0,n.kt)("p",null,"The CCXTTickerMarketDataSource is used to get the latest ticker data for a symbol. It is based\non the popular ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/ccxt/ccxt"},"ccxt")," library."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from investing_algorithm_framework import CCXTTickerMarketDataSource, TradingStrategy, \\\n    Algorithm, TimeUnit\n\n# A ohlcv market data source for the BTC/EUR symbol on the BITVAVO exchange\nbitvavo_ticker_btc_eur = CCXTTickerMarketDataSource(\n    identifier="BTC-ticker",\n    market="BITVAVO",\n    symbol="BTC/EUR",\n)\n\nclass MyTradingStrategy(TradingStrategy):\n    time_unit = TimeUnit.SECOND # The time unit of the strategy\n    interval = 5 # The interval of the strategy, runs every 5 seconds\n    # Registering the market data source\n    market_data_sources = [bitvavo_ticker_btc_eur]\n\n    def apply_strategy(self, algorithm: Algorithm, market_data: Dict[str, Any]):\n        print(market_data[bitvavo_ticker_btc_eur.get_identifier()])\n')),(0,n.kt)("h3",{id:"ccxtohlcvmarketdatasource"},"CCXTOHLCVMarketDataSource"),(0,n.kt)("p",null,"The CCXTOHLCVMarketDataSource is used to get candle stick/OHLCV data for a symbol. It is based\non the popular ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/ccxt/ccxt"},"ccxt")," library."),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"For ohlcv data you need to specify a start date, and/or an end date.\nIf you don't specify an end date, the framework will use the current date as the end date. The daterange between\nthe start and end date is used to determine the number of candlesticks in your ohlcv data. E.g. if you\nspecify a start date of ",(0,n.kt)("inlineCode",{parentName:"p"},"start_date=datetime.utcnow() - timedelta(days=17)")," and a timeframe of 2h, the framework will\nfetch 216 candlesticks (17 days * 12 candlesticks per day). Keep in mind that by leveraging a function like ",(0,n.kt)("inlineCode",{parentName:"p"},"datetime.utcnow()"),"\nyou will get the current date in UTC time everytime the market data source is used. This allows you to get the latest data\neverytime the strategy runs.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from investing_algorithm_framework import CCXTOHLCVMarketDataSource, TradingStrategy, \\\n    Algorithm, TimeUnit\n\n# A order book market data source for the BTC/EUR symbol on the BITVAVO exchange\nbitvavo_btc_eur_ohlcv_2h = CCXTTickerMarketDataSource(\n    identifier="BTC-ohlcv-2h",\n    market="BITVAVO",\n    symbol="BTC/EUR",\n)\n\nclass MyTradingStrategy(TradingStrategy):\n    time_unit = TimeUnit.SECOND # The time unit of the strategy\n    interval = 5 # The interval of the strategy, runs every 5 seconds\n    # Registering the market data source\n    market_data_sources = [bitvavo_btc_eur_ohlcv_2h]\n\n    def apply_strategy(self, algorithm: Algorithm, market_data: Dict[str, Any]):\n        print(market_data[bitvavo_btc_eur_ohlcv_2h.get_identifier()])\n')),(0,n.kt)("h3",{id:"ccxtorderbookmarketdatasource"},"CCXTOrderBookMarketDataSource"),(0,n.kt)("p",null,"The CCXTOrderBookMarketDataSource is used to get order book data for a symbol. It is based\non the popular ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/ccxt/ccxt"},"ccxt")," library."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from investing_algorithm_framework import CCXTOrderBookMarketDataSource, TradingStrategy, \\\n    Algorithm, TimeUnit\n\n# A ticker market data source for the BTC/EUR symbol on the BITVAVO exchange\nbitvavo_btc_eur_order_book = CCXTOrderBookMarketDataSource(\n    identifier="BTC-order-book",\n    market="BITVAVO",\n    symbol="BTC/EUR",\n)\n\nclass MyTradingStrategy(TradingStrategy):\n    time_unit = TimeUnit.SECOND # The time unit of the strategy\n    interval = 5 # The interval of the strategy, runs every 5 seconds\n    # Registering the market data source\n    market_data_sources = [bitvavo_btc_eur_order_book]\n\n    def apply_strategy(self, algorithm: Algorithm, market_data: Dict[str, Any]):\n        print(market_data[bitvavo_btc_eur_order_book.get_identifier()])\n')))}m.isMDXComponent=!0}}]);