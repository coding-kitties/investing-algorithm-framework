"use strict";(self.webpackChunkinvesting_algorithm_framework_docs=self.webpackChunkinvesting_algorithm_framework_docs||[]).push([[1627],{3905:(e,r,t)=>{t.d(r,{Zo:()=>m,kt:()=>u});var o=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=o.createContext({}),d=function(e){var r=o.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},m=function(e){var r=d(e.components);return o.createElement(s.Provider,{value:r},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},c=o.forwardRef((function(e,r){var t=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=d(t),c=n,u=p["".concat(s,".").concat(c)]||p[c]||g[c]||i;return t?o.createElement(u,a(a({ref:r},m),{},{components:t})):o.createElement(u,a({ref:r},m))}));function u(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var i=t.length,a=new Array(i);a[0]=c;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[p]="string"==typeof e?e:n,a[1]=l;for(var d=2;d<i;d++)a[d]=t[d];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}c.displayName="MDXCreateElement"},9162:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>a,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var o=t(7462),n=(t(7294),t(3905));const i={sidebar_position:5},a="Orders",l={unversionedId:"Getting Started/orders",id:"Getting Started/orders",title:"Orders",description:"In this section we will discuss how to create, retrieve and list orders.",source:"@site/docs/Getting Started/orders.md",sourceDirName:"Getting Started",slug:"/Getting Started/orders",permalink:"/investing-algorithm-framework/Getting Started/orders",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"defaultSideBar",previous:{title:"Strategies",permalink:"/investing-algorithm-framework/Getting Started/strategies"},next:{title:"Positions",permalink:"/investing-algorithm-framework/Getting Started/positions"}},s={},d=[{value:"Creating limit buy order",id:"creating-limit-buy-order",level:2},{value:"Creating a limit buy order based on a percentage of your portfolio",id:"creating-a-limit-buy-order-based-on-a-percentage-of-your-portfolio",level:3},{value:"Creating a limit sell order",id:"creating-a-limit-sell-order",level:2},{value:"Creating a limit sell order based on a percentage of your position",id:"creating-a-limit-sell-order-based-on-a-percentage-of-your-position",level:3},{value:"Closing a position with a limit sell order",id:"closing-a-position-with-a-limit-sell-order",level:3},{value:"Retrieving an order",id:"retrieving-an-order",level:2},{value:"Retrieving an order with other parameters",id:"retrieving-an-order-with-other-parameters",level:3},{value:"Listing all orders",id:"listing-all-orders",level:2},{value:"Checking pending orders",id:"checking-pending-orders",level:2}],m={toc:d},p="wrapper";function g(e){let{components:r,...t}=e;return(0,n.kt)(p,(0,o.Z)({},m,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"orders"},"Orders"),(0,n.kt)("p",null,"In this section we will discuss how to create, retrieve and list orders.\nThe orders of your trading bot are centrally managed by the algorithm component.\nIn your strategy you can create orders, retrieve orders and list orders through the algorithm component.\nThe following orders are supported by the framework:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Limit buy orders"),(0,n.kt)("li",{parentName:"ul"},"Limit sell orders"),(0,n.kt)("li",{parentName:"ul"},"Close position orders"),(0,n.kt)("li",{parentName:"ul"},"Close trade orders")),(0,n.kt)("h2",{id:"creating-limit-buy-order"},"Creating limit buy order"),(0,n.kt)("p",null,"You can create orders by using the following methods of the framework"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from investing_algortihm_framework import OrderSide, Context\n\n@app.strategy(time_unit=TimeUnit.SECOND, interval=5)\ndef perform_strategy(context: Context, market_data: Dict[str, Any]):\n    context.create_limit_order(\n        symbol="<symbol>", # E.g BTC\n        order_side=OrderSide.BUY, # or "buy"\n        amount=20,\n        price=10\n    )\n')),(0,n.kt)("h3",{id:"creating-a-limit-buy-order-based-on-a-percentage-of-your-portfolio"},"Creating a limit buy order based on a percentage of your portfolio"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from investing_algortihm_framework import OrderSide\n\n@app.strategy(time_unit=TimeUnit.SECOND, interval=5)\ndef perform_strategy(algorithm: Algorithm, market_data: Dict[str, Any]):\n    algorithm.create_limit_order(\n        symbol="<symbol>", # E.g BTC \n        order_side=OrderSide.BUY, # or "buy"\n        price=10,\n        percentage_of_portfolio=20 # Invest 20% of your portfolio unallocated funds\n    )\n')),(0,n.kt)("p",null,"You can also set the precision of the order by using the ",(0,n.kt)("inlineCode",{parentName:"p"},"precision")," parameter. The precision parameter is used to\nround the amount of the order to the given precision. E.g. if you set the precision to 2, the amount of the order\nwill be rounded to 2 decimals."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from investing_algortihm_framework import OrderSide\n@app.strategy(time_unit=TimeUnit.SECOND, interval=5)\ndef perform_strategy(algorithm: Algorithm, market_data: Dict[str, Any]):\n    algorithm.create_limit_order(\n        symbol="<symbol>", # E.g BTC \n        order_side=OrderSide.BUY, # or "buy"\n        price=10,\n        percentage_of_portfolio=20, # Invest 20% of your portfolio unallocated funds\n        precision=4 # Round the amount of the order to 4 decimals\n    )\n')),(0,n.kt)("h2",{id:"creating-a-limit-sell-order"},"Creating a limit sell order"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from investing_algortihm_framework import OrderSide\n\n@app.strategy(time_unit=TimeUnit.SECOND, interval=5)\ndef perform_strategy(algorithm: Algorithm, market_data: Dict[str, Any]):\n    algorithm.create_limit_order(\n        symbol="<symbol>", # E.g BTC\n        order_side=OrderSide.SELL, # or "sell"\n        price=10,\n        amount=20\n    )\n')),(0,n.kt)("h3",{id:"creating-a-limit-sell-order-based-on-a-percentage-of-your-position"},"Creating a limit sell order based on a percentage of your position"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from investing_algortihm_framework import OrderSide\n\n@app.strategy(time_unit=TimeUnit.SECOND, interval=5)\ndef perform_strategy(algorithm: Algorithm, market_data: Dict[str, Any]):\n    algorithm.create_limit_order(\n        symbol="<symbol>", # E.g BTC  \n        order_side=OrderSide.SELL, # or "sell"\n        price=10,\n        percentage_of_position=20 # Sell 20% of your position of the given symbol\n    )\n')),(0,n.kt)("p",null,"You can also set the precision of the order by using the ",(0,n.kt)("inlineCode",{parentName:"p"},"precision")," parameter. The precision parameter is used to\nround the amount of the order to the given precision. E.g. if you set the precision to 2, the amount of the order\nwill be rounded to 2 decimals."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'from investing_algortihm_framework import OrderSide\n\n@app.strategy(time_unit=TimeUnit.SECOND, interval=5)\ndef perform_strategy(algorithm: Algorithm, market_data: Dict[str, Any]):\n    algorithm.create_limit_order(\n        symbol="<symbol>", # E.g BTC  \n        order_side=OrderSide.SELL, # or "sell"\n        price=10,\n        percentage_of_position=20, # Sell 20% of your position of the given symbol\n        precision=4 # Round the amount of the order to 4 decimals\n    )\n')),(0,n.kt)("h3",{id:"closing-a-position-with-a-limit-sell-order"},"Closing a position with a limit sell order"),(0,n.kt)("p",null,"Closing a position can easily be done by using the ",(0,n.kt)("inlineCode",{parentName:"p"},"close_position")," method of your algorithm component.\nThis method will create a limit sell order for the given symbol and amount of the position."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from investing_algortihm_framework import OrderSide\n\n@app.strategy(time_unit=TimeUnit.SECOND, interval=5)\ndef perform_strategy(algorithm: Algorithm, market_data: Dict[str, Any]):\n    algorithm.close_position(<symbol>) # E.g BTC close your BTC position\n")),(0,n.kt)("h2",{id:"retrieving-an-order"},"Retrieving an order"),(0,n.kt)("p",null,"You can retrieve an order by using the ",(0,n.kt)("inlineCode",{parentName:"p"},"get_order")," method of your algorithm component. If you want to retrieve an order\nby reference id (Order id set to the order from the broker or exchange), you can do this in the following way:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from investing_algortihm_framework import OrderSide\n\n@app.strategy(time_unit=TimeUnit.SECOND, interval=5)\ndef perform_strategy(algorithm: Algorithm, market_data: Dict[str, Any]):\n    order = algorithm.get_order(reference_id=<your broker/exchange order id>))\n")),(0,n.kt)("h3",{id:"retrieving-an-order-with-other-parameters"},"Retrieving an order with other parameters"),(0,n.kt)("p",null,"You can retrieve an order by symbol and market in the following way."),(0,n.kt)("admonition",{title:"Multiple orders mismatch",type:"info"},(0,n.kt)("p",{parentName:"admonition"},"Keep in mind that when there exist multiple orders for a given symbol or market, you will\nlikely not retrieve the order you are looking for. It is probably better to retrieve the order by reference id or list all\norders and filter the order you are looking for.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from investing_algortihm_framework import OrderSide\n\n@app.strategy(time_unit=TimeUnit.SECOND, interval=5)\ndef perform_strategy(algorithm: Algorithm, market_data: Dict[str, Any]):\n        order = algorithm.get_order(\n            market=<market e.g. binance, bitvavo>,\n            target_symbol=<target symbol e.g. btc, dot>,\n            trading_symbol=<trading symbol e.g. eur>,\n            order_side=<order side e.g. SELL, BUY>,\n            order_type=<order type e.g. LIMIT, MARKET>,\n        )\n")),(0,n.kt)("h2",{id:"listing-all-orders"},"Listing all orders"),(0,n.kt)("p",null,"You can list all orders by using the ",(0,n.kt)("inlineCode",{parentName:"p"},"get_orders")," method of your algorithm component."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from investing_algortihm_framework import OrderSide\n\n@app.strategy(time_unit=TimeUnit.SECOND, interval=5)\ndef perform_strategy(algorithm: Algorithm, market_data: Dict[str, Any]):\n    orders = algorithm.get_orders(\n        market=<market e.g. binance, bitvavo>,\n        target_symbol=<target symbol e.g. btc, dot>,\n        status=<status of the order e.g. FILLED, OPEN>,\n        order_side=<order side e.g. SELL, BUY>,\n        order_type=<order type e.g. LIMIT, MARKET>,\n    )\n")),(0,n.kt)("h2",{id:"checking-pending-orders"},"Checking pending orders"),(0,n.kt)("p",null,"You can check the status of your orders by using the ",(0,n.kt)("inlineCode",{parentName:"p"},"check_pending_orders")," method of your algorithm component.\nThe framework will automatically update the status of your order if it has been changed by the broker or exchange. This\nmeans that the filled, remaining, status and order fee attributes of your order will be updated."),(0,n.kt)("admonition",{title:"Pending orders are checked automatically",type:"info"},(0,n.kt)("p",{parentName:"admonition"},"The framework will automatically check your pending orders every time your strategy runs. This means that you don't have to\ncall the ",(0,n.kt)("inlineCode",{parentName:"p"},"check_pending_orders")," method of your algorithm component in your strategy. This method is only useful if you want to\ncheck the status of your orders in between strategy runs (e.g. in a recurring ",(0,n.kt)("a",{parentName:"p",href:"/tasks"},"task")," you define or when you\nyou want to call the method again in your strategy).")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from investing_algortihm_framework import OrderSide\n\n@app.strategy(time_unit=TimeUnit.SECOND, interval=5)\ndef perform_strategy(algorithm: Algorithm, market_data: Dict[str, Any]):\n    algorithm.check_pending_orders()\n")))}g.isMDXComponent=!0}}]);