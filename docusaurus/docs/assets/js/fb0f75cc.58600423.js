"use strict";(self.webpackChunkinvesting_algorithm_framework_docs=self.webpackChunkinvesting_algorithm_framework_docs||[]).push([[2094],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(a),d=n,k=u["".concat(l,".").concat(d)]||u[d]||g[d]||o;return a?r.createElement(k,i(i({ref:t},p),{},{components:a})):r.createElement(k,i({ref:t},p))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:n,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},9777:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=a(7462),n=(a(7294),a(3905));const o={},i="Backtesting",s={unversionedId:"Getting Started/backtesting",id:"Getting Started/backtesting",title:"Backtesting",description:"Backtesting is the process of testing a trading strategy on historical data to see how it would have performed in the past.",source:"@site/docs/Getting Started/backtesting.md",sourceDirName:"Getting Started",slug:"/Getting Started/backtesting",permalink:"/investing-algorithm-framework/Getting Started/backtesting",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSideBar",previous:{title:"Tasks",permalink:"/investing-algorithm-framework/Getting Started/tasks"},next:{title:"Deployment",permalink:"/investing-algorithm-framework/Getting Started/deployment"}},l={},c=[{value:"Running a backtest",id:"running-a-backtest",level:2},{value:"Showing the backtest results",id:"showing-the-backtest-results",level:3},{value:"Loading old backtest reports",id:"loading-old-backtest-reports",level:3},{value:"Evaluating backtest reports",id:"evaluating-backtest-reports",level:3},{value:"Saving the strategy",id:"saving-the-strategy",level:3}],p={toc:c},u="wrapper";function g(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"backtesting"},"Backtesting"),(0,n.kt)("p",null,"Backtesting is the process of testing a trading strategy on historical data to see how it would have performed in the past.\nYou can easily run backtests with the framework for various timeframes and data sources."),(0,n.kt)("h2",{id:"running-a-backtest"},"Running a backtest"),(0,n.kt)("p",null,"When you have created a trading strategy you can easily run a backtest in the following ways:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'import logging.config\nfrom datetime import datetime, timedelta\nfrom investing_algorithm_framework import (\n    CCXTOHLCVMarketDataSource, CCXTTickerMarketDataSource, PortfolioConfiguration, create_app, pretty_print_backtest, BacktestDateRange, TimeUnit, TradingStrategy, OrderSide, DEFAULT_LOGGING_CONFIG, Context\n)\n\nlogging.config.dictConfig(DEFAULT_LOGGING_CONFIG)\n\nbitvavo_btc_eur_ohlcv_2h = CCXTOHLCVMarketDataSource(\n    identifier="BTC/EUR-ohlcv-2h",\n    market="BINANCE",\n    symbol="BTC/EUR",\n    time_frame="2h",\n    window_size=200\n)\n\nclass ExampleStrategy(TradingStrategy):\n    time_unit = TimeUnit.HOUR\n    interval = 2\n    market_data_sources = [bitvavo_btc_eur_ohlcv_2h, bitvavo_btc_eur_ticker]\n\n    def apply_strategy(self, context: Context, market_data):\n        print("Running strategy")\n\napp = create_app(name="Example strategy")\napp.add_strategy(CrossOverStrategy)\n\n# Add a portfolio configuration of 400 euro initial balance\napp.add_portfolio_configuration(\n    PortfolioConfiguration(\n        market="BINANCE", trading_symbol="EUR", initial_balance=400,\n    )\n)\n\nif __name__ == "__main__":\n    end_date = datetime(2023, 12, 2)\n    start_date = end_date - timedelta(days=100)\n    date_range = BacktestDateRange(\n        start_date=start_date,\n        end_date=end_date\n    )\n    backtest_report = app.run_backtest(\n        backtest_date_range=date_range, save_in_memory_strategies=True\n    )\n')),(0,n.kt)("h3",{id:"showing-the-backtest-results"},"Showing the backtest results"),(0,n.kt)("p",null,"You can show the backtest results by using the ",(0,n.kt)("inlineCode",{parentName:"p"},"pretty_print_backtest")," function. This will show you the backtest report in a nice format."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"report = app.run_backtest(\n    backtest_date_range=date_range, save_in_memory_strategies=True\n)\npretty_print_backtest(report)\n")),(0,n.kt)("h3",{id:"loading-old-backtest-reports"},"Loading old backtest reports"),(0,n.kt)("p",null,"You can load old backtest reports by using the ",(0,n.kt)("inlineCode",{parentName:"p"},"load_backtest_report")," function. This will load the backtest\nreport from the file system."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from investing_algorithm_framework import load_backtest_reports\n\nreports = load_backtest_reports(<path_to_backtest_reports_directory>)\n")),(0,n.kt)("h3",{id:"evaluating-backtest-reports"},"Evaluating backtest reports"),(0,n.kt)("p",null,"You can evaluate backtest reports by using the ",(0,n.kt)("inlineCode",{parentName:"p"},"BacktestReportsEvaluation")," class. This will evaluate the backtest"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from investing_algorithm_framework import BacktestReportsEvaluation, \\\n    pretty_print_backtest_reports_evaluation, load_backtest_reports\n\nreports = load_backtest_reports(<path_to_backtest_reports_directory>)\nevaluation = BacktestReportsEvaluation(reports)\npretty_print_backtest_reports_evaluation(evaluation)\n")),(0,n.kt)("h3",{id:"saving-the-strategy"},"Saving the strategy"),(0,n.kt)("p",null,"During the backtest, the framework will not automatically save the strategy. You can save the strategy\nby using the ",(0,n.kt)("inlineCode",{parentName:"p"},"save_strategy")," parameter of the ",(0,n.kt)("inlineCode",{parentName:"p"},"run_backtest")," function. By default, it will save all the strategies\nthat are in the ",(0,n.kt)("inlineCode",{parentName:"p"},"strategies")," directory. If the directory where there strategies are located has a different name, you\ncan specify the directory name by using the ",(0,n.kt)("inlineCode",{parentName:"p"},"strategy_directory")," parameter of the ",(0,n.kt)("inlineCode",{parentName:"p"},"run_backtest")," function."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"The save_strategy parameter by default expects that you have the following directory structure:"),(0,n.kt)("pre",{parentName:"blockquote"},(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},".\n\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 strategies\n\u2502   \u251c\u2500\u2500 data_providers.py\n\u2502   \u2514\u2500\u2500 strategy.py\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 .env.example\n\u2514\u2500\u2500 README.md\n"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"backtest_report = app.run_backtest(backtest_date_range=date_range, save_strategy=True)\n")),(0,n.kt)("p",null,"Use the ",(0,n.kt)("inlineCode",{parentName:"p"},"strategy_directory")," parameter to specify the directory where the strategies are located."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'backtest_report = app.run_backtest(\n    backtest_date_range=date_range, save_strategy=True, strategy_directory="my_strategies"\n)\n')),(0,n.kt)("p",null,"If you want to directly save the loaded-in strategies, you can use the ",(0,n.kt)("inlineCode",{parentName:"p"},"save_in_memory_strategies")," parameter of the ",(0,n.kt)("inlineCode",{parentName:"p"},"run_backtest")," function. This will save the strategies\nthat are loaded in memory. This is useful if you're running a backtest in a jupyter notebook where the strategy is defined in a code cell."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"backtest_report = app.run_backtest(\n    backtest_date_range=date_range, save_strategy=True, save_in_memory_strategies=True\n)\n")))}g.isMDXComponent=!0}}]);