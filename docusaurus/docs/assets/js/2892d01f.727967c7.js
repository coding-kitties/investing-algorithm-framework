"use strict";(self.webpackChunkinvesting_algorithm_framework_docs=self.webpackChunkinvesting_algorithm_framework_docs||[]).push([[5034],{2938:t=>{t.exports=JSON.parse('{"blogPosts":[{"id":"how-to-deploy-a-trading-bot","metadata":{"permalink":"/investing-algorithm-framework/blog/how-to-deploy-a-trading-bot","source":"@site/blog/2023-08-05-how-to-deploy-a-trading-bot.md","title":"How to deploy a trading bot","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","date":"2023-08-05T00:00:00.000Z","formattedDate":"August 5, 2023","tags":[{"label":"trading bot","permalink":"/investing-algorithm-framework/blog/tags/trading-bot"},{"label":"deployment","permalink":"/investing-algorithm-framework/blog/tags/deployment"},{"label":"azure functions","permalink":"/investing-algorithm-framework/blog/tags/azure-functions"},{"label":"aws lambda","permalink":"/investing-algorithm-framework/blog/tags/aws-lambda"},{"label":"crypto","permalink":"/investing-algorithm-framework/blog/tags/crypto"},{"label":"investing algorithm","permalink":"/investing-algorithm-framework/blog/tags/investing-algorithm"},{"label":"investing algorithm framework","permalink":"/investing-algorithm-framework/blog/tags/investing-algorithm-framework"}],"readingTime":0.245,"hasTruncateMarker":false,"authors":[{"name":"Marc van Duyn","title":"How to deploy a trading bot","url":"https://github.com/mduyn","image_url":"https://github.com/mduyn.png","imageURL":"https://github.com/mduyn.png"}],"frontMatter":{"slug":"how-to-deploy-a-trading-bot","title":"How to deploy a trading bot","authors":{"name":"Marc van Duyn","title":"How to deploy a trading bot","url":"https://github.com/mduyn","image_url":"https://github.com/mduyn.png","imageURL":"https://github.com/mduyn.png"},"tags":["trading bot","deployment","azure functions","aws lambda","crypto","investing algorithm","investing algorithm framework"]},"nextItem":{"title":"How to create a trading bot for bitvavo","permalink":"/investing-algorithm-framework/blog/how-to-create-a-trading-bot-for-bitvavo"}},"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\n## How to create a trading bot for binance\\n\\n## Connect to Binance\\n\\n## Create a strategy\\n\\n## Backtest your strategy\\n\\n## Run your strategy"},{"id":"how-to-create-a-trading-bot-for-bitvavo","metadata":{"permalink":"/investing-algorithm-framework/blog/how-to-create-a-trading-bot-for-bitvavo","source":"@site/blog/2023-08-04-how-to-create-a-trading-bot-for-bitvavo.md","title":"How to create a trading bot for bitvavo","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","date":"2023-08-04T00:00:00.000Z","formattedDate":"August 4, 2023","tags":[{"label":"trading bot","permalink":"/investing-algorithm-framework/blog/tags/trading-bot"},{"label":"bitvavo","permalink":"/investing-algorithm-framework/blog/tags/bitvavo"},{"label":"crypto","permalink":"/investing-algorithm-framework/blog/tags/crypto"},{"label":"investing algorithm","permalink":"/investing-algorithm-framework/blog/tags/investing-algorithm"},{"label":"investing algorithm framework","permalink":"/investing-algorithm-framework/blog/tags/investing-algorithm-framework"}],"readingTime":0.245,"hasTruncateMarker":false,"authors":[{"name":"Marc van Duyn","title":"How to create a trading bot for bitvavo","url":"https://github.com/mduyn","image_url":"https://github.com/mduyn.png","imageURL":"https://github.com/mduyn.png"}],"frontMatter":{"slug":"how-to-create-a-trading-bot-for-bitvavo","title":"How to create a trading bot for bitvavo","authors":{"name":"Marc van Duyn","title":"How to create a trading bot for bitvavo","url":"https://github.com/mduyn","image_url":"https://github.com/mduyn.png","imageURL":"https://github.com/mduyn.png"},"tags":["trading bot","bitvavo","crypto","investing algorithm","investing algorithm framework"]},"prevItem":{"title":"How to deploy a trading bot","permalink":"/investing-algorithm-framework/blog/how-to-deploy-a-trading-bot"},"nextItem":{"title":"How to create a trading bot for binance","permalink":"/investing-algorithm-framework/blog/hot-to-create-a-trading-bot-for-binance"}},"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\n## How to create a trading bot for binance\\n\\n## Connect to Binance\\n\\n## Create a strategy\\n\\n## Backtest your strategy\\n\\n## Run your strategy"},{"id":"hot-to-create-a-trading-bot-for-binance","metadata":{"permalink":"/investing-algorithm-framework/blog/hot-to-create-a-trading-bot-for-binance","source":"@site/blog/2023-08-03-how-to-create-a-trading-bot-for-binance.md","title":"How to create a trading bot for binance","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","date":"2023-08-03T00:00:00.000Z","formattedDate":"August 3, 2023","tags":[{"label":"trading bot","permalink":"/investing-algorithm-framework/blog/tags/trading-bot"},{"label":"binance","permalink":"/investing-algorithm-framework/blog/tags/binance"},{"label":"crypto","permalink":"/investing-algorithm-framework/blog/tags/crypto"},{"label":"investing algorithm","permalink":"/investing-algorithm-framework/blog/tags/investing-algorithm"},{"label":"investing algorithm framework","permalink":"/investing-algorithm-framework/blog/tags/investing-algorithm-framework"}],"readingTime":0.245,"hasTruncateMarker":false,"authors":[{"name":"Marc van Duyn","title":"How to create a trading bot for Binance","url":"https://github.com/mduyn","image_url":"https://github.com/mduyn.png","imageURL":"https://github.com/mduyn.png"}],"frontMatter":{"slug":"hot-to-create-a-trading-bot-for-binance","title":"How to create a trading bot for binance","authors":{"name":"Marc van Duyn","title":"How to create a trading bot for Binance","url":"https://github.com/mduyn","image_url":"https://github.com/mduyn.png","imageURL":"https://github.com/mduyn.png"},"tags":["trading bot","binance","crypto","investing algorithm","investing algorithm framework"]},"prevItem":{"title":"How to create a trading bot for bitvavo","permalink":"/investing-algorithm-framework/blog/how-to-create-a-trading-bot-for-bitvavo"},"nextItem":{"title":"How to build a trading bot in 5 steps","permalink":"/investing-algorithm-framework/blog/how-to-create-a-trading-bot-in-5-steps"}},"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\n## How to create a trading bot for binance\\n\\n## Connect to Binance\\n\\n## Create a strategy\\n\\n## Backtest your strategy\\n\\n## Run your strategy"},{"id":"how-to-create-a-trading-bot-in-5-steps","metadata":{"permalink":"/investing-algorithm-framework/blog/how-to-create-a-trading-bot-in-5-steps","source":"@site/blog/2023-08-01-how-to-create-a-trading-bot-in-5-steps.md","title":"How to build a trading bot in 5 steps","description":"Would you like to build your own trading bot but do not know where to start? You have come to the right place.","date":"2023-08-01T00:00:00.000Z","formattedDate":"August 1, 2023","tags":[{"label":"trading bot","permalink":"/investing-algorithm-framework/blog/tags/trading-bot"},{"label":"deployment","permalink":"/investing-algorithm-framework/blog/tags/deployment"},{"label":"azure functions","permalink":"/investing-algorithm-framework/blog/tags/azure-functions"},{"label":"aws lambda","permalink":"/investing-algorithm-framework/blog/tags/aws-lambda"},{"label":"crypto","permalink":"/investing-algorithm-framework/blog/tags/crypto"},{"label":"investing algorithm","permalink":"/investing-algorithm-framework/blog/tags/investing-algorithm"},{"label":"investing algorithm framework","permalink":"/investing-algorithm-framework/blog/tags/investing-algorithm-framework"}],"readingTime":15.825,"hasTruncateMarker":false,"authors":[{"name":"Marc van Duyn","title":"How to create a trading bot","url":"https://github.com/mduyn","image_url":"https://github.com/mduyn.png","imageURL":"https://github.com/mduyn.png"}],"frontMatter":{"slug":"how-to-create-a-trading-bot-in-5-steps","authors":{"name":"Marc van Duyn","title":"How to create a trading bot","url":"https://github.com/mduyn","image_url":"https://github.com/mduyn.png","imageURL":"https://github.com/mduyn.png"},"tags":["trading bot","deployment","azure functions","aws lambda","crypto","investing algorithm","investing algorithm framework"]},"prevItem":{"title":"How to create a trading bot for binance","permalink":"/investing-algorithm-framework/blog/hot-to-create-a-trading-bot-for-binance"}},"content":"Would you like to build your own trading bot but do not know where to start? You have come to the right place.\\nIn this guide we will walk you through the four steps of building a trading bot, and get you started with automated trading!\\n\\n> All source code for this blog can be found [here](https://github.com/MDUYN/trading-bot-example).\\n> The code is written in Python 3.9.6 and the main framework used is the [Investing algorithm framework](https://investing-algorithm-framework.com) for building the trading bot.\\n> If you are interested in using a trading bot, but do not want to build one yourself or if you would like to\\n> make you trading bot available for other to use, you can check out [Finterion](https://finterion.com).\\n\\n## 1 Choosing the right framework\\nThere are a many libraries, packages and resources available to build a trading bot. To find the right\\ntools for you consider looking at the following list of [resources](https://wilsonfreitas.github.io/awesome-quant/).\\nFor this blog we will use the [Investing algorithm framework](https://github.com/coding-kitties/investing-algorithm-framework).\\nThis is a Python based framework that allows you to build your own trading bot. It is open-source and free to use.\\n\\n## 2 Creating a trading bot with the investing algorithm framework\\nThe investing algorithm framework has various options to build your own trading bot and implement a strategy.\\nSome key questions to consider when building your strategy are:\\n\\n* How often should my bot run?\\n* Which market data should my bot use?\\n* Which indicators should my bot use?\\n* On which exchange or broker should my bot trade?\\n* How do I deploy my bot?\\n\\nFor our trading bot we would like to implement a simple strategy that buys and sells the cryptocurrency\\nbitcoin based on a set of simple indicators. The strategy will run every 2 hours. This means that every 2 hours the bot will\\ncheck the price of bitcoin and decide whether to buy or sell.\\n\\n### 2.1 Setting up the trading bot\\nTo set up the trading bot, we first need to install the investing algorithm framework.\\n\\n```bash\\npip install investing-algorithm-framework\\n```\\n\\n### 2.2 Specifying our market data\\nNext, we need specify how often our trading bot runs and which market data it\'s going to use.\\nThe investing algorithm framework supports various types of market data. For this example we will use the\\nhistorical price data of bitcoin in candle stick format. In trading terms this is called\\nOHLCV (Open, High, Low, Close, Volume) data. In order to specify this in the framework we need\\nto register a trading strategy with the framework. We do this in the following way:\\n\\n```python\\nfrom datetime import datetime, timedelta\\n\\nfrom investing_algorithm_framework import CCXTOHLCVMarketDataSource, \\\\\\n    CCXTTickerMarketDataSource\\n\\nbitvavo_btc_eur_ohlcv_2h = CCXTOHLCVMarketDataSource(\\n    identifier=\\"BTC/EUR-ohlcv\\",\\n    market=\\"BITVAVO\\",\\n    symbol=\\"BTC/EUR\\",\\n    timeframe=\\"2h\\",\\n    # We want to retrieve data from the last 3 days (3 days * 24 hours * 4(15m) = 288 candlesticks)\\n    start_date_func=lambda: datetime.utcnow() - timedelta(days=17)\\n)\\n# Ticker data to track orders, trades and positions we make with symbol BTC/EUR\\nbitvavo_btc_eur_ticker = CCXTTickerMarketDataSource(\\n    identifier=\\"BTC/EUR-ticker\\",\\n    market=\\"BITVAVO\\",\\n    symbol=\\"BTC/EUR\\",\\n)\\n```\\n\\n### 2.3 Specifying our trading strategy\\nNow that we have set up the market data sources for our trading bot, we can implement the trading strategy. For this example we will\\nimplement a simple strategy that buys bitcoin when there is a golden cross between a fast and slow moving average.\\nThe golden cross is a bullish signal that occurs when the short-term (fast) moving average crosses\\nabove a long-term (slow) moving average.\\n\\nFor the sell signal we will use the opposite. We will sell bitcoin when there is a death cross between the fast and the slow\\nmoving average period. The death cross is a bearish signal that occurs when the short-term (fast) moving average crosses below\\nthe long-term (slow) moving average.\\n\\nSo to summarize:\\nWhen the fast moving average crosses above the slow moving average, we buy. When the fast moving average crosses\\nbelow the slow moving average, we sell.\\n\\nIn order to implement this strategy we need to use the market data that we have retrieved from the exchange. We will\\nuse the OHLCV (candlestick) data to calculate the moving averages and we will use ticker data to get the most recent price of bitcoin.\\n\\n> This code uses tulipy to calculate the moving averages. Tulipy is a Python binding for the technical analysis library (tulipindicators)[https://tulipindicators.org/].\\n\\nCreat a new file called strategy.py and add the following code:\\n\\n```python\\nfrom investing_algorithm_framework import TradingStrategy, TimeUnit, Algorithm\\n\\nclass GoldenCrossDeathCrossTradingStrategy(TradingStrategy):\\n    time_unit = TimeUnit.HOUR\\n    interval = 2\\n    market_data_sources = [\\n        \\"BTC/EUR-ohlcv\\",\\n        \\"BTC/EUR-ticker\\",\\n    ]\\n    symbols = [\\"BTC/EUR\\"]\\n\\n    def apply_strategy(self, algorithm: Algorithm, market_data: dict):\\n        pass\\n```\\n\\nThen we implement the apply_strategy method. This method is called every time\\nthe trading strategy is executed. As defined above the strategy is run\\nevery 2 hours.\\n\\nIn the `apply_strategy` we first check if we have any open orders for a symbol.\\nIf we do not have any open order we check if there is a golden cross or a death cross.\\n\\n> The reason we check if there are any open orders first is because we do not want to open a new order\\n> when we already have an open order that has not yet been closed (filed) by the exchange.\\n> We only want to open a new position when we do not have any open orders.\\n\\n```python\\nfrom investing_algorithm_framework import TradingStrategy, TimeUnit, Algorithm\\nimport tulipy as tp\\nimport pandas as pd\\n\\nclass GoldenCrossDeathCrossTradingStrategy(TradingStrategy):\\n    time_unit = TimeUnit.HOUR\\n    interval = 2\\n    market_data_sources = [\\n        \\"BTC/EUR-ohlcv\\",\\n        \\"BTC/EUR-ticker\\",\\n    ]\\n    symbols = [\\"BTC/EUR\\"]\\n\\n    def apply_strategy(self, algorithm: Algorithm, market_data: dict):\\n        \\n        for symbol in self.symbols:\\n            target_symbol = symbol.split(\'/\')[0]\\n            \\n            # Don\'t open a new order when we already have an open order\\n            if algorithm.has_open_orders(target_symbol):\\n                continue\\n    \\n            ohlcv_data = market_data[f\\"{symbol}-ohlcv\\"]\\n            df = pd.DataFrame(\\n                ohlcv_data,\\n                columns=[\'Datetime\', \'Open\', \'High\', \'Low\', \'Close\', \'Volume\']\\n            )\\n            # Fast moving average\\n            fast = tp.sma(df[\\"Close\\"].to_numpy(), period=9)\\n            # Slow moving average\\n            slow = tp.sma(df[\\"Close\\"].to_numpy(), period=50)\\n            # Current price of symbol (BTC/EUR)\\n            price = market_data[f\\"{symbol}-ticker\\"][\\"bid\\"]\\n```\\n\\nNext we check if there is a golden cross or a death cross. If there is a\\ngolden cross we buy bitcoin. If there is a death cross we sell bitcoin.\\n\\n```python\\nfrom investing_algorithm_framework import TradingStrategy, TimeUnit, \\\\\\n    Algorithm, OrderSide\\nimport tulipy as tp\\nimport pandas as pd\\n\\ndef is_crossover(fast_series, slow_series):\\n    \\"\\"\\"\\n    Expect df to have columns: Date, ma_<period_one>, ma_<period_two>.\\n    With the given date time it will check if the ma_<period_one> is a\\n    crossover with the ma_<period_two>\\n    \\"\\"\\"\\n\\n    return fast_series[-2] <= slow_series[-2] \\\\\\n           and fast_series[-1] > slow_series[-1]\\n\\n\\ndef is_crossunder(fast_series, slow_series):\\n    \\"\\"\\"\\n    Expect df to have columns: Date, ma_<period_one>, ma_<period_two>.\\n    With the given date time it will check if the ma_<period_one> is a\\n    crossover with the ma_<period_two>\\n    \\"\\"\\"\\n\\n    return fast_series[-2] >= slow_series[-2] \\\\\\n        and fast_series[-1] < slow_series[-1]\\n\\n\\nclass GoldenCrossDeathCrossTradingStrategy(TradingStrategy):\\n    time_unit = TimeUnit.HOUR\\n    interval = 2\\n    market_data_sources = [\\n        \\"BTC/EUR-ohlcv\\",\\n        \\"BTC/EUR-ticker\\",\\n    ]\\n    symbols = [\\"BTC/EUR\\"]\\n\\n    def apply_strategy(self, algorithm: Algorithm, market_data: dict):\\n\\n        for symbol in self.symbols:\\n            target_symbol = symbol.split(\'/\')[0]\\n            \\n            # Don\'t open a new order when we already have an open order\\n            if algorithm.has_open_orders(target_symbol):\\n                continue\\n\\n            ohlcv_data = market_data[f\\"{symbol}-ohlcv\\"]\\n            df = pd.DataFrame(\\n                ohlcv_data,\\n                columns=[\'Datetime\', \'Open\', \'High\', \'Low\', \'Close\', \'Volume\']\\n            )\\n            fast = tp.sma(df[\\"Close\\"].to_numpy(), period=9)\\n            slow = tp.sma(df[\\"Close\\"].to_numpy(), period=50)\\n            price = market_data[f\\"{symbol}-ticker\\"][\\"bid\\"]\\n\\n            if algorithm.has_position(target_symbol) and is_crossunder(fast, slow):\\n                algorithm.close_position(target_symbol)\\n            elif not algorithm.has_position(target_symbol) and is_crossover(fast, slow):\\n                algorithm.create_limit_order(\\n                    target_symbol=target_symbol,\\n                    order_side=OrderSide.BUY,\\n                    price=price,\\n                    percentage_of_portfolio=25,\\n                    precision=4\\n                )\\n```\\n\\n## 3 Testing our trading strategy\\nNow that we have implemented our trading strategy we can test it. To test our strategy we will use the\\nbacktesting functionality of the investing algorithm framework. This allows us to test our strategy on historical data.\\n\\nCreate a new file called `backtest.py` and add the following code:\\n\\n```python\\nimport sys\\nfrom datetime import datetime\\n\\nfrom investing_algorithm_framework import PortfolioConfiguration, \\\\\\n    pretty_print_backtest\\n\\nfrom app import app\\n\\n\\ndef convert_to_datetime(datetime_str):\\n    try:\\n        return datetime.strptime(datetime_str, \\"%Y-%m-%d\\")\\n    except ValueError:\\n        print(f\\"Error: Invalid datetime format for \'{datetime_str}\'. Please use the format \'YYYY-MM-DD HH:MM:SS\'\\")\\n        sys.exit(1)\\n\\n\\napp.add_portfolio_configuration(\\n    PortfolioConfiguration(\\n        market=\\"BITVAVO\\",\\n        trading_symbol=\\"EUR\\",\\n        initial_balance=400\\n    )\\n)\\n\\nif __name__ == \\"__main__\\":\\n\\n    if len(sys.argv) != 3:\\n        print(\\n            \\"Error: Please provide two datetime \\"\\n            \\"strings as command-line arguments.\\"\\n        )\\n        sys.exit(1)\\n\\n    # Get datetime strings from command-line arguments\\n    start_date_str = sys.argv[1]\\n    end_date_str = sys.argv[2]\\n\\n    # Convert datetime strings to datetime objects\\n    start_date = convert_to_datetime(start_date_str)\\n    end_date = convert_to_datetime(end_date_str)\\n    backtest_report = app.backtest(\\n        start_date=start_date,\\n        end_date=end_date,\\n        pending_order_check_interval=\\"2h\\"\\n    )\\n    pretty_print_backtest(backtest_report)\\n```\\n\\nRunning this code will give you the following output:\\n\\n```bash\\n$ python backtest 2023-01-01 2023-12-30\\n====================Backtest report===============================\\n* Start date: 2023-01-01 00:00:00\\n* End date: 2023-12-30 00:00:00\\n* Number of days: 363\\n* Number of runs: 4357\\n====================Portfolio overview============================\\n* Number of orders: 128\\n* Initial balance: 400.0000 EUR\\n* Final balance: 468.1028 EUR\\n* Total net gain: 68.1028 EUR\\n* Total net gain percentage: 17.0257%\\n* Growth rate: 17.0257%\\n* Growth 68.1028 EUR\\n====================Positions overview========================\\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\u2502 Position   \u2502   Amount \u2502   Pending amount \u2502   Cost (EUR) \u2502   Value (EUR) \u2502 Percentage of portfolio   \u2502   Growth (EUR) \u2502 Growth_rate   \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 EUR        \u2502  468.103 \u2502                0 \u2502      468.103 \u2502       468.103 \u2502 100.0000%                 \u2502              0 \u2502 0.0000%       \u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n====================Trades overview===========================\\n* Number of trades closed: 64\\n* Number of trades open: 0\\n* Percentage of positive trades: 29.6875%\\n* Percentage of negative trades: 70.3125%\\n* Average trade size: 108.4551 EUR\\n* Average trade duration: 77.125 hours\\n.... All trades overview\\n```\\n\\nAs you can see this trading strategy is profitable with a growth rate of 17% on its closed trades.\\nWhen creating a trading strategy its also very important to run the strategy on a time range that was considered to be a market downturn for you selected\\nassets. This will help you determine if your trading strategy is robust enough to handle market downturns.\\n\\nFor bitcoin the period from 11-11-2021 to 11-11-2022 was considered to be a market downturn.\\nWhen running our trading strategy on this period we get the following results:\\n\\n```bash\\n$ python backtest 2021-11-11 2022-11-11\\n====================Backtest report===============================\\n* Start date: 2021-11-11 00:00:00\\n* End date: 2022-11-11 00:00:00\\n* Number of days: 365\\n* Number of runs: 4381\\n====================Portfolio overview============================\\n* Number of orders: 130\\n* Initial balance: 400.0000 EUR\\n* Final balance: 356.0855 EUR\\n* Total net gain: -43.9145 EUR\\n* Total net gain percentage: -10.9786%\\n* Growth rate: -10.9786%\\n* Growth -43.9145 EUR\\n====================Positions overview========================\\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\u2502 Position   \u2502   Amount \u2502   Pending amount \u2502   Cost (EUR) \u2502   Value (EUR) \u2502 Percentage of portfolio   \u2502   Growth (EUR) \u2502 Growth_rate   \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 EUR        \u2502  356.086 \u2502                0 \u2502      356.086 \u2502       356.086 \u2502 100.0000%                 \u2502              0 \u2502 0.0000%       \u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n====================Trades overview===========================\\n* Number of trades closed: 65\\n* Number of trades open: 0\\n* Percentage of positive trades: 29.230769230769234%\\n* Percentage of negative trades: 70.76923076923077%\\n* Average trade size: 89.5404 EUR\\n* Average trade duration: 59.96923076923077 hours\\n.... All trades overview\\n```\\n\\nAs you can see this trading strategy is not profitable with a profit rate of -4% on its closed trades.\\nWe will try to improve it in the next section. The important thing to note here is that our trading strategy is not robust enough to handle market downturns.\\n\\n## 4 Improving our trading strategy\\nIn the previous section we saw that our trading bot was not profitable. In this section we will try to improve our trading strategy.\\nWhenever creating a trading bot you should always experiment with different metrics and parameters. In this section we will try to improve\\nour trading strategy by making the following changes:\\n\\n- Adding stop losses on our open trades, so we can pre-emtively close our trades when the price drops below a certain price.\\n- Adding a trend line to our trading strategy, so we only sell when the price is below the trend line.\\n- Changing out fast moving average from a simple moving average to an exponential moving average, which will give more weight to the most recent prices.\\n\\n\\nFirst, we will add a trend line (100sma) and change the fast sma (simple moving average) to a fast ema (exponential moving average).\\n\\n```python\\nclass ImprovedGoldenCrossDeathCrossTradingStrategy(TradingStrategy):\\n    time_unit = TimeUnit.HOUR\\n    interval = 2\\n    market_data_sources = [\\n        \\"BTC/EUR-ohlcv\\",\\n        \\"BTC/EUR-ticker\\",\\n    ]\\n    symbols = [\\"BTC/EUR\\"]\\n\\n    def apply_strategy(self, algorithm: Algorithm, market_data: dict):\\n\\n        for symbol in self.symbols:\\n            target_symbol = symbol.split(\'/\')[0]\\n\\n            # Don\'t open a new order when we already have an open order\\n            if algorithm.has_open_orders(target_symbol):\\n                continue\\n\\n            ohlcv_data = market_data[f\\"{symbol}-ohlcv\\"]\\n            df = pd.DataFrame(\\n                ohlcv_data,\\n                columns=[\'Datetime\', \'Open\', \'High\', \'Low\', \'Close\', \'Volume\']\\n            )\\n            fast = tp.sma(df[\\"Close\\"].to_numpy(), period=9)\\n            # Changed fast sma to fast ema\\n            slow = tp.ema(df[\\"Close\\"].to_numpy(), period=50)\\n            # Calculate trend line\\n            trend = tp.sma(df[\\"Close\\"].to_numpy(), period=100)\\n            price = market_data[f\\"{symbol}-ticker\\"][\\"bid\\"]\\n\\n            .... Remaining code\\n```\\n\\nFinally, we change the sell and buy triggers:\\n\\n```python\\ndef apply_strategy(self, algorithm: Algorithm, market_data: dict):\\n\\n    for symbol in self.symbols:\\n        target_symbol = symbol.split(\'/\')[0]\\n\\n        # Don\'t open a new order when we already have an open order\\n        if algorithm.has_open_orders(target_symbol):\\n            continue\\n\\n        ohlcv_data = market_data[f\\"{symbol}-ohlcv\\"]\\n        df = pd.DataFrame(\\n            ohlcv_data,\\n            columns=[\'Datetime\', \'Open\', \'High\', \'Low\', \'Close\', \'Volume\']\\n        )\\n        fast = tp.sma(df[\\"Close\\"].to_numpy(), period=9)\\n        # Changed fast sma to fast ema\\n        slow = tp.ema(df[\\"Close\\"].to_numpy(), period=50)\\n        # Calculate trend line\\n        trend = tp.sma(df[\\"Close\\"].to_numpy(), period=100)\\n        price = market_data[f\\"{symbol}-ticker\\"][\\"bid\\"]\\n        \\n        # Sell when crossunder with trend\\n        if algorithm.has_position(target_symbol) \\\\\\n                and is_crossunder(fast, trend):\\n            algorithm.close_position(target_symbol)\\n            \\n        # Only buy when crossover\\n        elif not algorithm.has_position(target_symbol) \\\\\\n                and is_crossover(fast, slow) \\\\\\n            algorithm.create_limit_order(\\n                target_symbol=target_symbol,\\n                order_side=OrderSide.BUY,\\n                price=price,\\n                percentage_of_portfolio=25,\\n                precision=4\\n            )\\n\\n        # Checking manual stopp losses with a 6% stop loss\\n        open_trades = algorithm.get_open_trades(target_symbol)\\n\\n        for open_trade in open_trades:\\n            filtered_df = df[open_trade.opened_at <= df[\'Datetime\']]\\n            close_prices = filtered_df[\'Close\'].tolist()\\n            current_price = market_data[f\\"{symbol}-ticker\\"]\\n\\n            if open_trade.is_manual_stop_loss_trigger(\\n                prices=close_prices,\\n                current_price=current_price[\\"bid\\"],\\n                stop_loss_percentage=6\\n            ):\\n                algorithm.close_trade(open_trade)\\n```\\n\\nWhen we run this trading strategy for the same time period as before\\nwe get the following result:\\n```bash \\n$ python backtest 2021-11-11 2022-11-11\\n====================Backtest report===============================\\n* Start date: 2021-11-11 00:00:00\\n* End date: 2022-11-11 00:00:00\\n* Number of days: 365\\n* Number of runs: 4381\\n====================Portfolio overview============================\\n* Number of orders: 34\\n* Initial balance: 400.0000 EUR\\n* Final balance: 378.3081 EUR\\n* Total net gain: -21.6919 EUR\\n* Total net gain percentage: -5.4230%\\n* Growth rate: -5.4230%\\n* Growth -21.6919 EUR\\n====================Positions overview========================\\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\u2502 Position   \u2502   Amount \u2502   Pending amount \u2502   Cost (EUR) \u2502   Value (EUR) \u2502 Percentage of portfolio   \u2502   Growth (EUR) \u2502 Growth_rate   \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 EUR        \u2502  378.308 \u2502                0 \u2502      378.308 \u2502       378.308 \u2502 100.0000%                 \u2502              0 \u2502 0.0000%       \u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n====================Trades overview===========================\\n* Number of trades closed: 17\\n* Number of trades open: 0\\n* Percentage of positive trades: 11.76470588235294%\\n* Percentage of negative trades: 88.23529411764706%\\n* Average trade size: 95.9035 EUR\\n* Average trade duration: 69.29411764705883 hours\\n.... All trades overview\\n```\\n\\nand for the favorable time period we get the following result:\\n```bash\\n$ python backtest.py 2023-01-01 2023-12-30\\n====================Backtest report===============================\\n* Start date: 2023-01-01 00:00:00\\n* End date: 2023-12-30 00:00:00\\n* Number of days: 363\\n* Number of runs: 4357\\n====================Portfolio overview============================\\n* Number of orders: 90\\n* Initial balance: 400.0000 EUR\\n* Final balance: 464.3659 EUR\\n* Total net gain: 64.3659 EUR\\n* Total net gain percentage: 16.0915%\\n* Growth rate: 16.0915%\\n* Growth 64.3659 EUR\\n====================Positions overview========================\\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\\n\u2502 Position   \u2502   Amount \u2502   Pending amount \u2502   Cost (EUR) \u2502   Value (EUR) \u2502 Percentage of portfolio   \u2502   Growth (EUR) \u2502 Growth_rate   \u2502\\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\\n\u2502 EUR        \u2502  464.366 \u2502                0 \u2502      464.366 \u2502       464.366 \u2502 100.0000%                 \u2502              0 \u2502 0.0000%       \u2502\\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\\n====================Trades overview===========================\\n* Number of trades closed: 45\\n* Number of trades open: 0\\n* Percentage of positive trades: 31.11111111111111%\\n* Percentage of negative trades: 68.88888888888889%\\n* Average trade size: 109.6916 EUR\\n* Average trade duration: 123.28888888888889 hours\\n.... All trades overview\\n```\\n\\n\\n## 5 Deploying our trading bot\\nTo deploy our trading bot we will create an azure function that will run our trading bot every 2 hours. Before we start,\\nplease make sure you have the following installed and configured:\\n\\n- You need to have a Microsoft Azure account to deploy the trading bot. You can create a free account [here](https://azure.microsoft.com/en-us/free/).\\n- You also need to have the Azure CLI installed. You can find the installation instructions[here](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli).\\n- You also need to have azure function core tools installed. You can find the installation instructions [here](https://learn.microsoft.com/en-us/azure/azure-functions/functions-run-local?tabs=windows%2Cisolated-process%2Cnode-v4%2Cpython-v2%2Chttp-trigger%2Ccontainer-apps&pivots=programming-language-csharp#install-the-azure-functions-core-tools).\\n- Make sure you are logged in to Azure with the Azure CLI. You can do this by running the following command:\\n```bash\\naz login\\n```\\n\\nFirst we create a new file called `host.json` with the following content:\\n```json\\n{\\n  \\"version\\": \\"2.0\\",\\n  \\"logging\\": {\\n    \\"applicationInsights\\": {\\n      \\"samplingSettings\\": {\\n        \\"isEnabled\\": true,\\n        \\"excludedTypes\\": \\"Request\\"\\n      }\\n    }\\n  },\\n  \\"extensionBundle\\": {\\n    \\"id\\": \\"Microsoft.Azure.Functions.ExtensionBundle\\",\\n    \\"version\\": \\"[4.*, 5.0.0)\\"\\n  }\\n}\\n```\\n\\nNext we create a new file called `requirements.txt` with the following content:\\n```text\\nazure-functions\\ninvesting-algorithm-framework==2.0.4\\ntulipy==0.4.0\\n```\\n\\nNext we create a file called `function_app.py` with the following content:\\n```python\\nimport azure.functions as func\\nfrom investing_algorithm_framework import StatelessAction, \\\\\\n    PortfolioConfiguration, MarketCredential\\n\\nfrom app import app as trading_bot_app\\n\\ntrading_bot_app.add_portfolio_configuration(\\n    PortfolioConfiguration(\\n        market=\\"BITVAVO\\",\\n        trading_symbol=\\"EUR\\"\\n    )\\n)\\ntrading_bot_app.add_market_credential(\\n    MarketCredential( \\n        market=\\"BITVAVO\\",\\n        api_key=\\"<YOUR_BITVAVO_API_KEY>\\",\\n        secret_key=\\"<YOUR_BITVAVO_SECRET_KEY>\\"\\n    )\\n)\\napp = func.FunctionApp()\\n\\n\\n@app.timer_trigger(\\n    schedule=\\"0 */2 * * * *\\",\\n    arg_name=\\"myTimer\\",\\n    run_on_startup=True,\\n    use_monitor=False\\n)\\ndef trading_bot_azure_function(myTimer: func.TimerRequest) -> None:\\n    trading_bot_app.run(payload={\\"ACTION\\": StatelessAction.RUN_STRATEGY.value})\\n```\\n\\nNext we create a bash script called `create_resources.sh` and paste the\\nfollowing content in it. This script will create the necessary resources on azure for our trading bot.\\n\\n```bash\\n# Variables, you can change these if you want\\nresourceGroupName=\\"Trading-bot-rg\\"\\nfunctionAppName=\\"trading-bot-function-app\\"\\nstorageAccountName=\\"tradingbotstorageaccount\\"\\nlocation=\\"westeurope\\"   \\n\\n# Create a resource group\\naz group create --name $resourceGroupName --location $location\\n\\n# Create a storage account\\naz storage account create --name $storageAccountName --location $location --resource-group $resourceGroupName --sku Standard_LRS\\n\\n# Retrieve the storage account connection string\\nstorageConnectionString=$(az storage account show-connection-string --name $storageAccountName --resource-group $resourceGroupName --query connectionString --output tsv)\\n\\n# Create a consumption plan function app with Python 3.8\\naz functionapp create \\\\\\n  --name $functionAppName \\\\\\n  --resource-group $resourceGroupName \\\\\\n  --storage-account $storageAccountName \\\\\\n  --consumption-plan-location $location \\\\\\n  --runtime python \\\\\\n  --runtime-version 3.8 \\\\\\n  --functions-version 3 \\\\\\n  --os-type Linux \\\\\\n  --disable-app-insights true\\n\\n# Configure the storage connection string in the function app\\naz functionapp config appsettings set \\\\\\n  --name $functionAppName \\\\\\n  --resource-group $resourceGroupName \\\\\\n  --settings AzureWebJobsStorage=$storageConnectionString\\n```\\n\\nNextup we can use the azure functools to deploy our trading bot to azure.\\n```bash\\nfunc azure functionapp publish trading-bot-function-app\\n```\\n\\nIf everything went well you should see all the resources in your azure portal\\nand the trading bot should be running every 2 hours on the azure function.\\n\\n## 6 Conclusion\\nIn this tutorial we have shown you how to build a trading bot with the investing algorithm framework.\\nWe have also shown you how to test your trading bot and how to make some small improvements to let your trading bot perform better.\\nFinally, we have shown you how to deploy your trading bot to azure.\\n\\nI hope you have enjoyed this tutorial and that you have learned something new. Please let me know if you have any questions or feedback. If\\nyou would like to learn more about the investing algorithm framework you can check out the [documentation](https://investing-algorithm-framework.com/) also\\nyou can check out the [Finterion](https://finterion.com) platform if you would like to use a trading bot, but do not want to build one yourself or if you would like to\\nmake you trading bot available for other to use.\\n\\nAlso, don\'t forget to star the [investing algorithm framework](https://github.com/coding-kitties/investing-algorithm-framework) on github if you like it!\\n\\nYou can follow me on [twitter](https://twitter.com/mduyn) or connect with me on [linkedin](https://twitter.com/marcvanduyn). Also if you\\nwould like to read upcoming blogs you can subscribe to my [medium account](https://medium.com/@marcvanduyn)."}]}')}}]);