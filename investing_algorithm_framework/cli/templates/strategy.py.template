from investing_algorithm_framework import TimeUnit, TradingStrategy, Context, \
    OrderSide
from .market_data_providers import btc_eur_ohlcv_2h
from pyindicators import ema, is_crossover, is_crossunder


class MyTradingStrategy(TradingStrategy):
    time_unit = TimeUnit.HOUR
    interval = 2
    symbol_pairs = ["BTC/EUR"]
    market_data_sources = [btc_eur_ohlcv_2h]

    def apply_strategy(self, context: Context, market_data):

        for pair in self.symbol_pairs:
            # Get the market data for the current symbol pair
            market_data_indentifier = f"{pair}-ohlcv-2h"
            data = market_data[market_data_indentifier]
            symbol = pair.split('/')[0]

            # Calculate the EMA with a period of 200
            data = ema(
                data,
                period=200,
                source_column="close",
                result_column="ema_200"
            )

            # Calculate the EMA with a period of 50
            data = ema(
                data,
                period=50,
                source_column="close",
                result_column="ema_50"
            )

            if not context.has_position(symbol):

                if self._is_buy_signal(data):
                    price = data.iloc[-1]["close"]
                    order = context.create_limit_order(
                        target_symbol=symbol,
                        order_side=OrderSide.BUY,
                        price=price,
                        percentage_of_portfolio=25,
                        precision=4,
                    )
                    trade = context.get_trade(order_id=order.id)
                    context.add_stop_loss(
                        trade=trade,
                        trade_risk_type="trailing",
                        percentage=5,
                        sell_percentage=50
                    )
                    context.add_take_profit(
                        trade=trade,
                        percentage=5,
                        trade_risk_type="trailing",
                        sell_percentage=50
                    )
                    context.add_take_profit(
                        trade=trade,
                        percentage=10,
                        trade_risk_type="trailing",
                        sell_percentage=20
                    )

            elif self._is_sell_signal(data):
                open_trades = context.get_open_trades(
                    target_symbol=symbol
                )

                for trade in open_trades:
                    context.close_trade(trade)

    def _is_sell_signal(data):
        return is_crossunder(
            data,
            first_column="ema_50",
            second_column="ema_200",
            number_of_data_points=1
        )

    def _is_buy_signal(data):
        return is_crossover(
            data,
            first_column="ema_50",
            second_column="ema_200",
            number_of_data_points=1
        )
